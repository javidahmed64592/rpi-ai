[build-system]
# Minimum requirements for the build system to execute.
# PEP 508 specifications.
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "rpi-ai"
version = "1.0.1"
description = "AI written in Python to control a companion bot hosted on a Raspberry Pi."
readme = "README.md"
requires-python = ">=3.11"
license = { file = "LICENSE" }
authors = [
    { name = "Javid Ahmed", email = "javidahmed@icloud.com" }
]
classifiers = [
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
]
dependencies = [
    "flask",
    "google-genai",
    "gTTS",
    "psutil",
    "pydantic",
    "python-dotenv",
    "waitress",
]

[project.optional-dependencies]
dev = [
    "ruff",
    "mypy",
    "pytest",
    "pytest-cov",
    "tomli"
]

[project.urls]
repository = "https://github.com/javidahmed64592/rpi-ai"

[project.scripts]
rpi-ai = "rpi_ai.main:main"

[tool.pytest.ini_options]
addopts = [
    "-vv",
    "--cov",
    "--cov-report",
    "term-missing",
]

[tool.ruff]
target-version = "py312"
line-length = 120
indent-width = 4

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

[tool.ruff.lint]
select = [
    "A",
    "ANN",
    "ASYNC",
    "B",
    "C4",
    "D",
    "E",
    "EM",
    "F",
    "FBT",
    "G",
    "I",
    "ISC",
    "LOG",
    "N",
    "NPY",
    "PD",
    "PERF",
    "PL",
    "PT",
    "RET",
    "RUF",
    "S",
    "TRY",
    "UP",
    "W",
    "YTT",
]
ignore = [
    "D203",
    "D213",
    "E501",
    "E741",
    "G004",
    "ISC001",
    "N999",
    "PLR0913",
    "S101",
    "S104",
    "S105",
    "S603",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[[tool.mypy.overrides]]
module = [
    "google.*",
    "gtts.*",
    "psutil.*",
    "rpi_ai.*",
    "waitress.*",
]
ignore_missing_imports = true
